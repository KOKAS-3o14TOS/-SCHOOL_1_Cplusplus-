#include <iostream>
#include <fstream> // files
#include <sstream>
#include <vector>
#include "utils.h"
#include "user.h"

const int MAX = 100;

class UserCatalog {
private:
	std::vector<User*> users;

	long indexOf(uint) const;

public:
	UserCatalog();
	UserCatalog(const UserCatalog&);

	~UserCatalog();

	User* getUserById(uint) const;
	void addUser(User*);
	bool removeUserById(uint);
	bool changeUser(User*);

	bool load(std::string);
	bool save(std::string) const;
};

UserCatalog::UserCatalog() {
}

UserCatalog::UserCatalog(const UserCatalog &uc) {
	for (int i = 0; i < us.users.size(); i++) {
		users.push_back(new User( (*uc.users[i]) ));
	}
}

UserCatalog::~UserCatalog() {
	for (int i = 0; i < users.size(); i++) {
		delete users[i];
	}
}

long UserCatalog::indexOf(uint id) const {
	long pos = -1;
	for (int i = 0; i < users.size(); i++) {
		if (users[i]->getId() == id) {
			pos = i;
			break;
		}
	}
	return pos;
}

User* UserCatalog::getUserById(uint id) const {
	long pos;

	pos = indexOf(id);

	if (pos == -1) {
		return NULL;
	} else {
		return users[pos];
	}
}

void UserCatalog::addUser(User *u) {
	long pos;

	pos = indexOf(u->getId());

	if (pos == -1) {
		users.push_back(u);
	}
}

bool UserCatalog::removeUserById(uint id) {
	long pos;

	pos = indexOf(id);

	if (pos == -1) {
		return false;
	}

	delete users[pos];
	for (int i = pos; i < (users.size() - 1); i++) {
		users[i] = users[i + 1];
	}
	return true;
}

bool changeUser(User*);

bool UserCatalog::load(std::string filename) {
	std::ifstream file(filename);
	std::string input;

	if (!file.is_open()) {
		return false;
	}

	file >> current;

	for (int i = 0; i < current; i++) {
		getline(file, input);
    users.push_back(new User(input));
	}
	return true;
}

bool UserCatalog::save(std::string filename) const {
	std::ofstream file(filename);

	if (!file.is_open()) {
		return false;
	}

	file << max << "\n";
	file << current << "\n";
	for (int i = 0; i < current; i++) {
		file << users[i]->toString() << "\n";
	}
	return true;
}
